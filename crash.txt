
#### Configure core dump size with ulimit: ulimit -c unlimited
$ ulimit -a
core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 128397
max locked memory       (kbytes, -l) 16384
max memory size         (kbytes, -m) unlimited
open files                      (-n) 1024
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 128397
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited

#### Core dump config
/proc/sys/kernel/core_pattern
    By default, a core dump file is named core.
    core_pattern file can be set to define a template to name core dump files.
    The template can contain % specifiers, see https://man7.org/linux/man-pages/man5/core.5.html.
        %c  Core file size soft resource limit of crashing process
        %e  The process or thread's comm value
        %E  Pathname of executable, with slashes ('/') replaced by exclamation marks ('!')
        %h  Hostname
        %p  PID of dumped process, as seen in the PID namespace in which the process resides
        %P  PID of dumped process, as seen in the initial PID namespace
        %t  Time of dump, expressed as seconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC)
    If the first character of the file is a pipe symbol (|), the remainder of the line is
        interpreted as the command-line for a user-space program (or script) that is to be executed.
        Instead of being written to a file, the core dump is given as standard input to the program.
        The program must be specified using an absolute pathname (or a pathname relative to the root
            directory, /), and must immediately follow the '|' character.

/proc/sys/kernel/core_uses_pid
    If core_pattern does not include %p and core_uses_pid is not 0, .PID will be appended to the core filename

/proc/sys/kernel/core_pipe_limit
    A value of 0 indicates that unlimited processes may be captured in parallel, but that no waiting will take
        place (i.e., the collecting program is not guaranteed access to /proc/<crashing-PID>).

/proc/[pid]/coredump_filter
    Controlling which mappings are written to the core dump

Core dumps and systemd
    Check if it is configured:
        $ cat /proc/sys/kernel/core_pattern
        |/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %e
    If configured, the location of the dumps: /var/lib/systemd/coredump/

    coredumpctl: records the core dumps themselves and maintains a history of crashes
    coredumpctl comes with a service called systemd-coredump. This is a service that acquires the core dump, then
      processes it to extract metadata out of it. It then stores this information under /var/lib/systemd/coredump/.

#### Signals to generate a core dump: SIGABRT (6), SIGTRAP (5), SIGQUIT (3), SIGSEGV (11)

# kill -s SIGABRT $(pgrep PATTERN)
# PATTERN: Extended Regular Expression for matching against the process names or command lines
$ sleep 500&
[1] 3859
$ kill -s SIGTRAP $(pgrep sleep)
[1]+  Trace/breakpoint trap   (core dumped) sleep 500
$ ls /var/crash
core.sleep.3859.bz2

$ sleep 500&
[1] 4885
kill -s SIGABRT 4885
[1]+  Aborted                 (core dumped) sleep 500
$ ls /var/crash
core.sleep.4885.bz2 


#### Use gcore to capture the core dump of a running process
# A core file produced by gcore is equivalent to one produced by the kernel when the process crashes (and when
# "ulimit -c" was used to set up an appropriate core dump limit). However, unlike after a crash, after gcore
# finishes its job the program remains running without any change.
# gcore [-a] [-o prefix] pid1 [pid2...pidN]
#   -a         dump all memory mappings
#   -o prefix: default to gcore. The file name is composed as prefix.pid

#### coredumpctl: records the core dumps themselves and maintains a history of crashes
# coredumpctl comes with a service called systemd-coredump. This is a service that acquires the core dump, then
#   processes it to extract metadata out of it. It then stores this information under /var/lib/systemd/coredump/.

#### crash dump

kdump service enables you to save the contents of the system memory for analysis
kdump uses the kexec system call to boot into the capturing kernel without rebooting, and then captures the
    contents of the crashed kernelâ€™s memory and saves it into a file
The capturing kernel resides in a reserved part of the system memory (use crashkernel= in cmdline to reserve mem).
Core collector: makedumpfile
