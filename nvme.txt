## https://github.com/linux-nvme/nvme-cli

$ yum install nvme-cli

$ nvme --help
nvme-1.12
usage: nvme <command> [<device>] [<args>]

The '<device>' may be either an NVMe character device (ex: /dev/nvme0) or an
nvme block device (ex: /dev/nvme0n1).

The following are all implemented sub-commands:
  list                  List all NVMe devices and namespaces on machine
  list-subsys           List nvme subsystems
  id-ctrl               Send NVMe Identify Controller
  id-ns                 Send NVMe Identify Namespace, display structure
  id-ns-granularity     Send NVMe Identify Namespace Granularity List, display structure
  list-ns               Send NVMe Identify List, display structure
  list-ctrl             Send NVMe Identify Controller List, display structure
  list-secondary        List Secondary Controllers associated with a Primary Controller
  ns-descs              Send NVMe Namespace Descriptor List, display structure
  id-nvmset             Send NVMe Identify NVM Set List, display structure
  id-uuid               Send NVMe Identify UUID List, display structure
  create-ns             Creates a namespace with the provided parameters
  delete-ns             Deletes a namespace from the controller
  attach-ns             Attaches a namespace to requested controller(s)
  detach-ns             Detaches a namespace from requested controller(s)
  get-ns-id             Retrieve the namespace ID of opened block device
  get-log               Generic NVMe get log, returns log in raw format
  telemetry-log         Retrieve FW Telemetry log write to file
  fw-log                Retrieve FW Log, show it
  changed-ns-list-log   Retrieve Changed Namespace List, show it
  smart-log             Retrieve SMART Log, show it
  ana-log               Retrieve ANA Log, show it
  error-log             Retrieve Error Log, show it
  effects-log           Retrieve Command Effects Log, show it
  endurance-log         Retrieve Endurance Group Log, show it
  get-feature           Get feature and show the resulting value
  device-self-test      Perform the necessary tests to observe the performance
  self-test-log         Retrieve the SELF-TEST Log, show it
  set-feature           Set a feature and show the resulting value
  set-property          Set a property and show the resulting value
  get-property          Get a property and show the resulting value
  format                Format namespace with new block format
  fw-commit             Verify and commit firmware to a specific slot (fw-activate in old version < 1.2)
  fw-download           Download new firmware
  admin-passthru        Submit an arbitrary admin command, return results
  io-passthru           Submit an arbitrary IO command, return results
  security-send         Submit a Security Send command, return results
  security-recv         Submit a Security Receive command, return results
  get-lba-status        Submit a Get LBA Status command, return results
  resv-acquire          Submit a Reservation Acquire, return results
  resv-register         Submit a Reservation Register, return results
  resv-release          Submit a Reservation Release, return results
  resv-report           Submit a Reservation Report, return results
  dsm                   Submit a Data Set Management command, return results
  flush                 Submit a Flush command, return results
  compare               Submit a Compare command, return results
  read                  Submit a read command, return results
  write                 Submit a write command, return results
  write-zeroes          Submit a write zeroes command, return results
  write-uncor           Submit a write uncorrectable command, return results
  verify                Submit a verify command, return results
  sanitize              Submit a sanitize command
  sanitize-log          Retrieve sanitize log, show it
  reset                 Resets the controller
  subsystem-reset       Resets the subsystem
  ns-rescan             Rescans the NVME namespaces
  show-regs             Shows the controller registers or properties. Requires character device
  discover              Discover NVMeoF subsystems
  connect-all           Discover and Connect to NVMeoF subsystems
  connect               Connect to NVMeoF subsystem
  disconnect            Disconnect from NVMeoF subsystem
  disconnect-all        Disconnect from all connected NVMeoF subsystems
  gen-hostnqn           Generate NVMeoF host NQN
  show-hostnqn          Show NVMeoF host NQN
  dir-receive           Submit a Directive Receive command, return results
  dir-send              Submit a Directive Send command, return results
  virt-mgmt             Manage Flexible Resources between Primary and Secondary Controller 
  version               Shows the program version
  help                  Display this help

See 'nvme help <command>' for more information on a specific command

The following are all installed plugin extensions:
  intel           Intel vendor specific extensions
  lnvm            LightNVM specific extensions
  memblaze        Memblaze vendor specific extensions
  wdc             Western Digital vendor specific extensions
  huawei          Huawei vendor specific extensions
  netapp          NetApp vendor specific extensions
  toshiba         Toshiba NVME plugin
  micron          Micron vendor specific extensions
  seagate         Seagate vendor specific extensions
  virtium         Virtium vendor specific extensions
  shannon         Shannon vendor specific extensions
  dera            Dera vendor specific extensions
  sfx             ScaleFlux vendor specific extensions
  transcend       Transcend vendor specific extensions

See 'nvme <plugin> help' for more information on a plugin


#        nvme fw-download <device> [--fw=<firmware-file> | -f <firmware-file>]
#                           [--xfer=<transfer-size> | -x <transfer-size>]
#                           [--offset=<offset> | -o <offset>]

#       nvme fw-commit <device> [--slot=<slot> | -s <slot>]
#                           [--action=<action> | -a <action>]
#                           [--bpid=<boot-partid> | -b <boot-partid> ]

#       nvme reset <device>
       Requests NVMe controller reset. The <device> param is mandatory and must be an NVMe character device (ex: /dev/nvme0).

==== NVMeoF using tcp hands-on
https://www.linuxjournal.com/content/data-flash-part-iii-nvme-over-fabrics-using-tcp
https://www.youtube.com/watch?v=e--uZItOY3U

# 5.0 Linux kernel or later
# NVME Support
CONFIG_NVME_CORE=y
CONFIG_BLK_DEV_NVME=y
# CONFIG_NVME_MULTIPATH is not set
CONFIG_NVME_FABRICS=m
CONFIG_NVME_RDMA=m
# CONFIG_NVME_FC is not set
CONFIG_NVME_TCP=m
CONFIG_NVME_TARGET=m
CONFIG_NVME_TARGET_LOOP=m
CONFIG_NVME_TARGET_RDMA=m
# CONFIG_NVME_TARGET_FC is not set
CONFIG_NVME_TARGET_TCP=m

# Target node has multiple nvme drives; make the node nvme target for other nodes on the network to access the nvme drives
# Note: instead of using the sysfs virtual filesystem, you could also export NVMe targets with the open-source utility, nvmet-cli
$ lsblk                                        # Make sure there are NVMe devices available
$ mount -t configfs none /sys/kernel/config/   # Mount the kernel user configuration filesystem; required by NVMe Target instructions
$ cat /etc/modules-load.d/modules.conf         # kernel modules to load at boot time
nvmet
nvmet-tcp
$ modprobe nvmet
$ modprobe nvmet-tcp
$ lsmod | grep nvme
$ /sys/kernel/config/nvmet# tree
.
├── hosts
├── ports
└── subsystems

$ /sys/kernel/config/nvmet/subsystems# mkdir my_nvme_target01                       # Create an NVMe Target subsystem to host your devices
$ /sys/kernel/config/nvmet/subsystems# tree
.
└── my_nvme_target01
    ├── allowed_hosts
    ├── attr_allow_any_host
    ├── attr_serial
    ├── attr_version
    └── namespaces
$ /sys/kernel/config/nvmet/subsystems/my_nvme_target01# cat attr_allow_any_host
0
$ /sys/kernel/config/nvmet/subsystems/my_nvme_target01# echo 1 > attr_allow_any_host  # In reality, specify host machines by their NQN
$ /sys/kernel/config/nvmet/subsystems/my_nvme_target01# cat attr_allow_any_host
1
$ /sys/kernel/config/nvmet/subsystems/my_nvme_target01# mkdir -p namespaces/1         # Define a subsystem namespace
$ /sys/kernel/config/nvmet/subsystems/my_nvme_target01# tree
.
├── allowed_hosts
├── attr_allow_any_host
├── attr_serial
├── attr_version
└── namespaces
    └── 1
        ├── ana_grpid
        ├── buffered_io
        ├── device_nguid
        ├── device_path
        ├── device_uuid
        └── enable
$ /sys/kernel/config/nvmet/subsystems/my_nvme_target01/namespaces/1# cat device_path 
(null)
$ /sys/kernel/config/nvmet/subsystems/my_nvme_target01/namespaces/1# echo -n /dev/nvme0n1 > device_path
$ cat device_path 
/dev/nvme0n1
$ /sys/kernel/config/nvmet/subsystems/my_nvme_target01/namespaces/1# cat enable 
0
$ /sys/kernel/config/nvmet/subsystems/my_nvme_target01/namespaces/1# echo 1 > enable
$ /sys/kernel/config/nvmet/subsystems/my_nvme_target01/namespaces/1# cat enable 
1
$ /sys/kernel/config/nvmet/ports# mkdir 1                                              # Create an NVMe Target port to export the subsystem
$ /sys/kernel/config/nvmet/ports# tree
.
└── 1
    ├── addr_adrfam
    ├── addr_traddr
    ├── addr_treq
    ├── addr_trsvcid
    ├── addr_trtype
    ├── ana_groups
    │   └── 1
    │       └── ana_state
    ├── param_inline_data_size
    ├── referrals
    └── subsystems
$ /sys/kernel/config/nvmet/ports/1# cat addr_traddr 

$ /sys/kernel/config/nvmet/ports/1# echo 192.168.1.1 > addr_traddr                     # Use the IP addr of a preferred Ethernet interface port
$ /sys/kernel/config/nvmet/ports/1# cat addr_traddr 
10.194.65.70
$ /sys/kernel/config/nvmet/ports/1# cat addr_trtype

$ /sys/kernel/config/nvmet/ports/1# echo tcp > addr_trtype
$ /sys/kernel/config/nvmet/ports/1# cat addr_trtype
tcp
$ /sys/kernel/config/nvmet/ports/1# cat addr_trsvcid

$ sys/kernel/config/nvmet/ports/1# echo 4420 > addr_trsvcid
$ /sys/kernel/config/nvmet/ports/1# cat addr_trsvcid
4420
$ /sys/kernel/config/nvmet/ports/1# cat addr_adrfam

$ /sys/kernel/config/nvmet/ports/1# echo ipv4 > addr_adrfam
$ /sys/kernel/config/nvmet/ports/1# cat addr_adrfam
ipv4
$ /sys/kernel/config/nvmet/ports/1# ln -s /sys/kernel/config/nvmet/subsystems/my_nvme_target01 /sys/kernel/config/nvmet/ports/1/subsystems/my_nvme_target01
$ /sys/kernel/config/nvmet/ports/1# dmesg | grep nvmet                                # nvmet_tcp: enabling port 1 (192.168.1.1:4420)


# On initiator node
$ cat /etc/modules-load.d/modules.conf    # kernel modules to load at boot time
nvmet    
nvmet-tcp
$ modprobe nvme
$ modprobe nvme-tcp
$ lsmod | grep nvme

$ lsblk
$ apt update
$ apt install nvme-cli
$ nvme discover -t tcp -a 192.168.1.1 -s 4420
$ nvme connect -t tcp -n my_nvme_target01 -a 192.168.1.1 -s 4420
$ lsblk                                                                                # Should show the exported NVMe device on the target
$ nvme list
$ nvme disconnect -d /dev/nvme0n1

==== NVMeoF using RoCE hands-on
https://www.linuxjournal.com/content/data-flash-part-ii-using-nvme-drives-and-creating-nvme-over-fabrics-network
