# Password-less authentication to access a remote server
# 1) Create a key pair on host machine, e.g., ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub
ssh-keygen -t rsa
# 2) Copy public key, e.g., ~/.ssh/id_rsa.pub, to remote server ~/.ssh/authorized_keys 
ssh-copy-id username@remote_server
# 3) SSH to remote server.
ssh username@remote_server
ssh -l username remote_server

# Debug issues when password-less authentication not working
#  e.g., userauth_pubkey: key type ssh-rsa not in PubkeyAcceptedAlgorithms
ssh -v username@remote_server

# On ssh server, /etc/ssh/sshd_config
PubkeyAuthentication yes
AuthorizedKeysFile     .ssh/authorized_keys

sudo systemctl restart sshd

# On ssh client, ~/.ssh/config
PubkeyAcceptedKeyTypes=+ssh-rsa

# The ssh-agent is a helper program that keeps track of user's identity keys and their passphrases.
# The agent can then use the keys to log into other servers without having the user type in a
# password or passphrase again
# 1) Check if ssh-agent is running
env | grep SSH_AUTH_SOCK
ssh-add -l
# 2) Start ssh-agent manually if it is not started yet
eval $(ssh-agent -s)
ssh-add the_private_key_file   # When prompted, provide the passphrase that protects this private key
# 3) SSH to remote server that has the corrsponding public key installed
ssh username@remote_server     # No passphrase will be asked

# Run remote commands from local host
ssh username@remote_server the_cmd

# SSH options
# -V: ssh version
# -v: verbose to debug ssh client
# -q: quiet mode
# -p: port
# -i identity_file:
#     selects a file from which the identity (private key) for public key authentication is read
#     The default is ~/.ssh/id_dsa, ~/.ssh/id_ecdsa, ~/.ssh/id_ed25519 and ~/.ssh/id_rsa
# -X: enables X11 forwarding
# -Y: enables trusted X11 forwarding
# -c cipher_spec: selects the cipher specification for encrypting the session
# -C: requests compression of all data (including stdin, stdout, stderr, and data for forwarded X11,
#     TCP and UNIX-domain connections)
# -E log_file: append debug logs to log_file instead of standard error
# -f: requests ssh to go to background just before command execution
# -o option: used to give options in the format used in the configuration file
# -L [bind_address:]port:host:hostport
# -L [bind_address:]port:remote_socket
# -L local_socket:host:hostport
# -L local_socket:remote_socket
#    specifies that connections to the given TCP port or Unix socket on the local (client) host
#    are to be forwarded to the given host and port, or Unix socket, on the remote side
# -R [bind_address:]port:host:hostport
# -R [bind_address:]port:local_socket
# -R remote_socket:host:hostport
# -R remote_socket:local_socket
# -R [bind_address:]port
#    specifies that connections to the given TCP port or Unix socket on the remote (server) host
#    are to be forwarded to the local side
# -g: allows remote hosts to connect to local forwarded ports
# -N: do not execute a remote command. Useful for just forwarding ports

# SSH config
#   per-user configuration is in ~/.ssh/config
#   system-wide client configuration is in /etc/ssh/ssh_config
#   system-wide daemon configurtion is in /etc/ssh/sshd_config

# Configuration Order
#   Command-line options given directly in the terminal
#   Userâ€™s configuration file (~/.ssh/config)
#   System-wide configuration file for the client (/etc/ssh/ssh_config)

# Local secure port forwarding
# For example, to connect from client A to server B but route traffic securely through server C
# 1) From A, run
ssh C -L localport:B:remoteport
# 2) To connect to B:remoteport, connect to localhost:localport
ssh localhost:localport
# If doing this with config file  ~/.ssh/config:
 Host B_fw
 HostName C
 LocalForward 80 B:80

# Remote secure port forwarding
# For example, to give remote machine B access to another machine A, by passing securely through your local
# machine C.
# 1) From C, run
ssh B -R remoteport:A:targetport
# At this point, local users on B can connect to A:targetport through localhost:remoteport.
# If doing this with config file  ~/.ssh/config:
 Host exportme
 HostName B
 RemoteForward remoteport A:targetport

# To give support on support.mycompany.com access to machine A, run the following on machine A:22:
ssh support@support.mycompany.com -f -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -N -R 50000:localhost:22 MY_SUPPORT_TUNNEL
# Log on to machine A from support.mycompany.com:
ssh -p 50000 user_on_A@localhost

# To give support on support.mycompany.com access to machine B:443 through machine A, run the following on machine A:
ssh support@support.mycompany.com -f -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -N -R 50000:B:443 MY_SUPPORT_TUNNEL
# Log on to machine B from support.mycompany.com:
ssh -p 50000 user_on_B@localhost

# Close all ssh tunnels
pkill -f "ssh.*MY_SUPPORT_TUNNEL"      # -f: match against full argument lists

# squid proxy server
sudo apt install squid
# /etc/squid3/squid.conf
acl SSL_ports port 443
acl SSL_ports port 22
acl Safe_ports port 22 # ssh
acl Safe_ports port 80 # http
acl Safe_ports port 21 # ftp
acl Safe_ports port 443 # https
acl Safe_ports port 70 # gopher
acl Safe_ports port 210 # wais
acl Safe_ports port 1025-65535 # unregistered ports
acl Safe_ports port 280 # http-mgmt
acl Safe_ports port 488 # gss-http
acl Safe_ports port 591 # filemaker
acl Safe_ports port 777 # multiling http
acl CONNECT method CONNECT
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
http_access allow localhost manager
http_access deny manager
#http_access deny all
http_port 3128
coredump_dir /var/spool/squid3
auth_param basic program /usr/lib/squid3/basic_ncsa_auth /etc/squid3/passwords
auth_param basic realm proxy
acl authenticated proxy_auth REQUIRED
http_access allow authenticated
http_access allow all
# Enable proxy password
/etc/squid3# htpasswd -bc passwords admin admin
Adding password for user admin
/etc/squid3# cat passwords 
admin:$apr1$KnPBibRs$0qbBwSH/dPvprUfsWulgt1
/etc/squid3# service squid3 restart
squid3 stop/waiting
squid3 start/running, process 6853

# socat: Multipurpose relay (SOcket CAT)
Host support.mycompany.com
    ProxyCommand socat - PROXY:proxy_server:%h:%p,proxyport=3128,proxyauth=admin:admin
    Port 443
    ServerAliveCountMax 20
    ServerAliveInterval 30



######## Example user ansible on ssh server ########
# User ansible home /root/, no password
$ cat /etc/passwd | grep ansible
ansible:x:0:60085::/root:/bin/bash
$ cat /etc/shadow | grep ansible
ansible:!:19407::::::
$ ls -lart /root | grep ssh
drwxr-xr-x  2 root root   60 Jan 24 18:08 .ssh
$ ls -lart /root/.ssh | grep auth
-rw-r--r-- 1 root root 421 Jan 24 18:08 authorized_keys
$ systemctl is-active sshd
active

#### When the home directory /root/.ssh/ on ssh server is wide open (777), it doesn't try the rsa key:
# On ssh client
$ ssh -v -o StrictHostKeyChecking=no -o PasswordAuthentication=no ansible@host_ip
...
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Trying private key: /home/dyulu/.ssh/id_rsa
debug1: Authentications that can continue: publickey,password
debug1: No more authentication methods to try.
-o StrictHostKeyChecking=no -o PasswordAuthentication=no ansible@host_ip: Permission denied (publickey,password).
...
# On ssh server:
#     localhost sshd[2276123]: Authentication refused: bad ownership or modes for directory /root/.ssh
#     localhost sshd[2276123]: Connection closed by authenticating user ansible [ssh-client-ip] port 58368 [preauth]

#### With /root/.ssh/ set to 755 and authorized_keys set to 777
# On ssh client, same as above
# On ssh server:
#     localhost sshd[2281545]: Authentication refused: bad ownership or modes for file /root/.ssh/authorized_keys
#     localhost sshd[2281545]: Connection closed by authenticating user ansible [ssh-client-ip] port 35080 [preauth]

#### With /root/.ssh/ set to 755 and no authorized_keys file; or no /root/.ssh directory at all
# On ssh client, same as above
# On ssh server:
#     localhost sshd[2284838]: Connection closed by authenticating user ansible [ssh-client-ip] port 33068 [preauth]

#### With the home directory permissions set correctly (755) and authorized_keys (644):
# On ssh client
# ssh -v -o StrictHostKeyChecking=no -o PasswordAuthentication=no ansible@host_ip
...
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Trying private key:: /home/dyulu/.ssh/id_rsa
debug1: Authentication succeeded (publickey).
# On ssh server:
#     localhost sshd[2231609]: Accepted publickey for ansible from [ssh-client-ip] port 37252 ssh2: RSA SHA256:Jo9HpYCEZQd7PbJNM4sEZ+wjRH905p7UTJLOvE/O3GQ
#     localhost sshd[2231609]: pam_unix(sshd:session): session opened for user ansible(uid=0) by (uid=0)
# On ssh client: exit
# On ssh server:
#     localhost sshd[2231609]: Received disconnect from [ssh-client-ip] port 37252:11: disconnected by user
#     localhost sshd[2231609]: Disconnected from user ansible [ssh-client-ip] port 37252
#     pam_unix(sshd:session): session closed for user ansible

#### Change PubkeyAuthentication to no and restart sshd
# On ssh server
$ sshd -T | grep -i pubkeyauth
pubkeyauthentication no
pubkeyauthoptions none

# On ssh client
# ssh -v -o StrictHostKeyChecking=no -o PasswordAuthentication=no ansible@host_ip
...
debug1: Authentications that can continue: password
debug1: No more authentication methods to try.
-o StrictHostKeyChecking=no -o PasswordAuthentication=no ansible@host_ip: Permission denied (password).
# On ssh server:
#     localhost sshd[2964236]: Connection closed by authenticating user ansible [ssh-client-ip] port 42724 [preauth]

#### If rsa-sha2-512 not in PubkeyAcceptedKeyTypes
# On ssh server
$ grep -i pubkey /etc/ssh/sshd_config
#PubkeyAuthentication yes
pubkeyacceptedkeytypes ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com
$ sshd -T | grep -i pubkey
pubkeyauthentication yes
pubkeyacceptedkeytypes ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com
pubkeyauthoptions none

# On ssh client
# ssh -v -o StrictHostKeyChecking=no -o PasswordAuthentication=no ansible@host
...
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Trying private key: /u/dyulu/.ssh/id_rsa
debug1: Authentications that can continue: publickey,password
debug1: No more authentication methods to try.
-o StrictHostKeyChecking=no -o PasswordAuthentication=no ansible@host_ip: Permission denied (publickey,password)
# On ssh server:
#     localhost sshd[658503]: userauth_pubkey: key type ssh-rsa not in PubkeyAcceptedKeyTypes [preauth]
#     localhost sshd[658503]: Connection closed by authenticating user ansible [ssh-client-ip] port 45850 [preauth]

#### /etc/ssh/sshd_config: pubkeyacceptedkeytypes setting
# rsa-sha2-512: works
#     Accepted publickey for ansible from [ssh-client-ip] port 38486 ssh2: RSA SHA256:Jo9HpYCEZQd7PbJNM4sEZ+wjRH905p7UTJLOvE/O3GQ
#     pam_unix(sshd:session): session opened for user ansible(uid=0) by (uid=0)
# rsa-sha2-256 or ssh-rsa: does not work
#     userauth_pubkey: key type ssh-rsa not in PubkeyAcceptedKeyTypes [preauth]
#     Connection closed by authenticating user ansible [ssh-client-ip] port 56344 [preauth]
## On ssh server running kernel 5.10
## OpenSSH_8.4p1 Debian-5+deb11u2, OpenSSL 1.1.1w  11 Sep 2023
$ grep -i pubkey /etc/ssh/sshd_config
#PubkeyAuthentication yes
pubkeyacceptedkeytypes rsa-sha2-512
$ sshd -T | grep -i pubkey
pubkeyauthentication yes
pubkeyacceptedkeytypes rsa-sha2-512
pubkeyauthoptions none
## On ssh server running kernel 6.1: it is pubkeyacceptedalgorithms in sshd -T output
## OpenSSH_9.2p1 Debian-2+deb12u2, OpenSSL 3.0.11 19 Sep 2023
# rsa-sha2-512: works
#     Accepted publickey for ansible from [ssh-client-ip] port 38486 ssh2: RSA SHA256:Jo9HpYCEZQd7PbJNM4sEZ+wjRH905p7UTJLOvE/O3GQ
#     pam_unix(sshd:session): session opened for user ansible(uid=0) by (uid=0)
#     pam_env(sshd:session): deprecated reading of user environment enabled
# rsa-sha2-256 or ssh-rsa: does not work
#     userauth_pubkey: signature algorithm rsa-sha2-512 not in PubkeyAcceptedAlgorithms [preauth]
#     Connection closed by authenticating user ansible [ssh-client-ip] port 59072 [preauth]
$ grep -i pubkey /etc/ssh/sshd_config
#PubkeyAuthentication yes
pubkeyacceptedkeytypes rsa-sha2-512
$ sshd -T | grep -i pubkey
pubkeyauthentication yes
pubkeyacceptedalgorithms rsa-sha2-512
pubkeyauthoptions none

#### If network is down on ssh server
# On ssh client
# ssh -v -o StrictHostKeyChecking=no -o PasswordAuthentication=no ansible@host_ip
...
debug1: connect to address [host_ip] port 22: Connection timed out
ssh: connect to host [host_ip] port 22: Connection timed out


# https://security.stackexchange.com/questions/270349/understanding-ssh-rsa-not-in-pubkeyacceptedalgorithms
# key type ssh-rsa:            in the first column of authorized_keys file
#                              RSA keys are perfectly fine and widely supported
# signature algorithm ssh-rsa: RSA signatures using the SHA-1 hash algorithm
#                              Since SHA-1 is insecure, OpenSSH disables the ssh-rsa signature algorithm since version 8.8
# SSH clients and servers are now expected to use rsa-sha2-256 (RSA signatures with SHA-256) or rsa-sha2-512 (RSA signatures with SHA-512)
#### When ssh client uses old client like OpenSSH_6.8p1, OpenSSL 1.0.2g  1 Mar 2016
# On ssh server running 8.8 and above
#     userauth_pubkey: signature algorithm ssh-rsa not in PubkeyAcceptedAlgorithms [preauth]
#     Connection closed by authenticating user ansible [ssh-client-ip] port 50412 [preauth]
# Solutions:
#     Update the SSH client, so that the newer signature algorithms can be used
#     Create a new SSH key with the ECDSA type (e. g. ecdsa-sha2-nistp256) or EdDSA rather than RSA
#         Circumvent the signature algorithm problem
#     Last resort is to enable the ssh-rsa signature algorithm on the server by adding it to PubkeyAcceptedAlgorithms
#         Security risk

#### Detect ssh server identity change:
# On ssh client:
#     ~/.ssh/            700 (drwx------)
#     ~/.ssh/config      600 (-rw-------)
#     ~/.ssh/known_hosts 600 (-rw-------)
# Entry format: [ssh_server_name|ssh_server_ip|hashed_server_name_or_ip] ssh_server_HostKey_or_ssh_fingerprint
# ssh client config option order:
#     1. command line options
#     2. user-specific file:  ~/.ssh/config
#     3. system-wide file:    /etc/ssh/ssh_config
#     HashKnownHosts yes      # hash host names and addresses when they are added to ~/.ssh/known_hosts
ssh-keygen -H: convert an existing known_hosts file to hashed form
ssh-keygen -F: search a known_hosts file for a particular hostname
ssh-keygen -R: remove individual entries from the file
# How to check your SSH key fingerprint: on ssh server
$ sshd -T | grep -i hash
fingerprinthash SHA256
$  sshd -T | grep -i hostkey
hostkeyagent none
hostkeyalgorithms ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,sk-ecdsa-sha2-nistp256-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,sk-ecdsa-sha2-nistp256@openssh.com,ssh-ed25519,sk-ssh-ed25519@openssh.com,rsa-sha2-512,rsa-sha2-256,ssh-rsa
hostkey /etc/ssh/ssh_host_rsa_key
hostkey /etc/ssh/ssh_host_ecdsa_key
hostkey /etc/ssh/ssh_host_ed25519_key
# For ECDSA key with SHA256 hash algorithm:
$ ssh-keygen -lf /etc/ssh/ssh_host_ecdsa_key.pub
256 SHA256:agagQthdSMNzfQ/mxDiIMBVTg5uyI/U99kQ+Nqu1UwQ root@5acdff85d733 (ECDSA)
