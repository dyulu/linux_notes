# Inspect all locks in a system
lslocks
cat /proc/locks

# flock: locks from within shell scripts or from the command line

# Wrap the lock around the execution of a command
# Lock a specified file or directory, which is created (assuming appropriate permissions) if not already exist
flock [options] file|directory command [arguments]
flock [options] file|directory -c command

# Uses an open file by its file descriptor number
flock [options] number

-c, --command command
    Pass a single command, without arguments

-F, --no-fork
    Do not fork before executing command. Upon execution the flock process is replaced by command which continues to hold the lock.
    Incompatible with --close as there would otherwise be nothing left to hold the lock.

-o, --close
    Close the file descriptor on which the lock is held before executing command. This is useful if command spawns a child process
    which should not be holding the lock.

-e, -x, --exclusive
    Obtain an exclusive lock, sometimes called a write lock.  This is the default.

-n, --nb, --nonblock
    Fail rather than wait if the lock cannot be immediately acquired.  See the -E option for the exit status used.

-w, --wait, --timeout seconds
    Fail  if  the lock cannot be acquired within seconds.  Decimal fractional values are allowed. See the -E option for the exit status used.
    The zero number of seconds is interpreted as --nonblock.

-E, --conflict-exit-code number
    The exit status used when the -n option is in use, and the conflicting lock exists, or the -w option is in use, and the timeout is reached.
    The default value is 1.  The number has to be in the range of 0 to 255.

-s, --shared
    Obtain a shared lock, sometimes called a read lock.

-u, --unlock
    Drop a lock. This is usually not required, since a lock is automatically dropped when the file is closed.
    However, it may be required in special cases, for example if the enclosed command group may have forked a background process
    which should not be holding the lock.

--verbose
    Report how long it took to acquire the lock, or why the lock could not be obtained.

# From shell script.
# File open mode: > or >>: create theh file if not exists (write permission required)
#                 <: requires file already exists but only read permission is required
(
    flock -n 9 || exit 1
    # ... commands executed under lock ...
) 9>/var/lock/mylockfile

# Boilerplate code for shell scripts.
# Put it at the top of the shell script you want to lock and it'll automatically lock itself on  the  first  run.
[ "${FLOCKER}" != "$0" ] && exec env FLOCKER="$0" flock -en "$0" "$0" "$@" || :

# From shell prompt, locking a file without spawning a subprocess
$ exec 4<>/var/lock/mylockfile
$ flock -n 4
