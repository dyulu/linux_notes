# Show system status
systemctl status

# Show cgroup tree
systemd-cgls
ps xawf -eo pid,user,cgroup,args   # ps with cgroups; figure out which service a process belongs to

# List running units
systemctl
systemctl list-units
systemctl list-units --all
systemctl list-units --all --state=inactive
systemctl list-units --type=service

# List failed units
systemctl --failed
systemctl --state=failed
# To examine their log to figure out why they failed
journalctl -u failed_service_name

# Diagnose a service
# set the SYSTEMD_LOG_LEVEL environment variable to debug in service
[Service]
Environment=SYSTEMD_LOG_LEVEL=debug
# set the environment variable manually
SYSTEMD_LOG_LEVEL=debug /lib/systemd/the_service_name.service
# Restart the service and watch the log with -f option

# List available units: /usr/lib/systemd/system/ and /etc/systemd/system/ (the latter takes precedence)
# /usr/lib/systemd/system/: units provided by installed packages
# /etc/systemd/system/: units installed by the system administrator
systemctl list-unit-files

# Paths for unit files
systemctl show --property=UnitPath
systemctl show --property=UnitPath | xargs ls
systemctl show --property=UnitPath | xargs ls | grep -i network

# Show the cgroup slice, memory and parent for a PID
systemctl status <pid>

# Units: services (.service), mount points (.mount), devices (.device) or sockets (.socket)
# systemctl assumes .service if no suffix provided
systemctl start unit
systemctl stop unit
systemctl restart unit
systemctl reload unit
systemctl status unit
systemctl is-enabled unit
systemctl is-active unit
systemctl is-failed unit
systemctl disable unit
systemctl enable unit        # Enable a unit to be started on bootup
systemctl enable --now unit  # Enable a unit to be started on bootup and Start immediately
systemctl mask unit          # Mask a unit to make it impossible to start it, manually or as a dependency
systemctl unmask unit
systemctl help unit

# Reload systemd manager configuration, scanning for new or changed units
systemctl daemon-reload

# Display unit file
systemctl cat unit
# Show unit properties
systemctl show unit

# List unit dependencies: include those units that are either required by wanted by the unit
systemctl list-dependencies unit
systemctl list-dependencies unit --all            # recursively list all dependencies
systemctl list-dependencies unit --reverse        # units that depend on the specified unit
systemctl list-dependencies unit --before         # units that depend on the specified unit starting before them
systemctl list-dependencies unit --after          # units that depend on the specified unit starting after them
systemctl list-dependencies network-online.target
 
# Power management
systemctl reboot
systemctl poweroff
systemctl suspend
systemctl hibernate
systemctl hybrid-sleep

# Dependencies: Wants= and Requires= do not imply After=
# Unit A requires Unit B to be running before A is started: in [Unit] section of A, add
Requires=B
After=B
# If dependency is optional
Wants=B
After=B
# Dependencies are typically placed on services and not on targets
# For example, network.target is pulled in by whatever service configures your network interfaces, therefore
# ordering your custom unit after it is sufficient since network.target is started anyway

# To delay a service until after the network is up, include the following dependencies in the .service file
[Unit]
Wants=network-online.target
After=network-online.target

# Service types: [Service] section, Type= parameter
Type=simple (default): systemd considers the service to be started up immediately. The process must not fork.
                       Do not use this type if other services need to be ordered on this service, unless it is socket activated.
Type=forking: systemd considers the service started up once the process forks and the parent has exited.
              For classic daemons use this type unless you know that it is not necessary.
              You should specify PIDFile= as well so systemd can keep track of the main process.
Type=oneshot: this is useful for scripts that do a single job and then exit. You may want to set RemainAfterExit=yes
              as well so that systemd still considers the service as active after the process has exited.
Type=notify: identical to Type=simple, but with the stipulation that the daemon will send a signal to systemd when it is ready.
              The reference implementation for this notification is provided by libsystemd-daemon.so.
Type=dbus: the service is considered ready when the specified BusName appears on DBus's system bus.
Type=idle: systemd will delay execution of the service binary until all jobs are dispatched.
           Other than that behavior is very similar to Type=simple.

# Targets: systemd uses targets to group units together via dependencies and as standardized synchronization points.
# Get current targets
systemctl list-units --type=target

# Change current target: no effect on the next boot
# start all of the units associated with a target and stop all units that are not part of the dependency tree
systemctl list-dependencies the_target.target
systemctl isolate the_target.target

# Change default target to boot into
# The standard target is default.target, which is a symlink to graphical.target
systemctl get-default
systemctl set-default <target>
# Alternatively, append one of the following kernel parameters to your bootloader:
systemd.unit=multi-user.target (which roughly corresponds to the old runlevel 3),
systemd.unit=rescue.target (which roughly corresponds to the old runlevel 1).

# Default target order: Systemd chooses the default.target according to the following order:
Kernel parameter shown above
Symlink of /etc/systemd/system/default.target
Symlink of /usr/lib/systemd/system/default.target

find / -name default.target

# Mounting: systemd is in charge of mounting the partitions and filesystems specified in /etc/fstab. The systemd-fstab-generator(8)
# translates all the entries in /etc/fstab into systemd units, this is performed at boot time and whenever the configuration of the
# system manager is reloaded.

# To read systemd log
journalctl

# To show messages from current boot
journalctl -b -0
# To show messages from previous boot
journalctl -b -1
# To show messages from the second previous boot
journalctl -b -2

# To show all messages from date (and optional time)
journalctl --since="2020-06-28 12:00:00"
# To show  all messages since 20 minutes ago
journalctl --since "20 min ago"

# To follow new messages
journalctl -f

# To show all messages by a specific executable
journalctl /usr/lib/systemd/systemd

# To show all messages by a specific process
journalctl _PID=1

# To show all messages by a specific unit
journalctl -u docker.service

# To show kernel ring buffer
journalctl -k

# To show only error, critical and alert priority messages
journalctl -p err..alert
# can use numeric log level too, like
journalctl -p 3..1
# If single number/log level is used, all higher priority log levels are also included (i.e. 0 to 3 in this case)
journalctl -p 3

# Priority levels
Value    Severity      Keyword    Description
0        Emergency     emerg      System is unusable
1        Alert         alert      Should be corrected immediately
2        Critical      crit       Critical conditions
3        Error         err        Error conditions
4        Warning       warning    May indicate that an error will occur if action is not taken
5        Notice        notice     Events that are unusual, but not error conditions
6        Informational info       Normal operational messages that require no action
7        Debug         debug      Information useful to developers for debugging the application

# To show auth.log equivalent by filtering on syslog facility
journalctl SYSLOG_FACILITY=10

# Facility
Facility code     Keyword    Description
0                 kern       Kernel messages
1                 user       User-level messages
2                 mail       Mail system
3                 daemon     System daemons
4                 auth       Security/authorization messages
5                 syslog     Messages generated internally by syslogd
6                 lpr        Line printer subsystem (archaic subsystem)
7                 news       Network news subsystem (archaic subsystem)
8                 uucp       UUCP subsystem (archaic subsystem)
9                            Clock daemon
10                authpriv   Security/authorization messages
11                ftp        FTP daemon
12                -          NTP subsystem
13                -          Log audit
14                -          Log alert
15                cron       Scheduling daemon
16                local0     Local use 0 (local0)
17                local1     Local use 1 (local1)
18                local2     Local use 2 (local2)

====

systemd-analyze -h
systemd-analyze [OPTIONS...] {COMMAND} ...

Profile systemd, show unit dependencies, check unit files.

  -h --help                Show this help
     --version             Show package version
     --no-pager            Do not pipe output into a pager
     --system              Operate on system systemd instance
     --user                Operate on user systemd instance
     --global              Operate on global user configuration
  -H --host=[USER@]HOST    Operate on remote host
  -M --machine=CONTAINER   Operate on local container
     --order               Show only order in the graph
     --require             Show only requirement in the graph
     --from-pattern=GLOB   Show only origins in the graph
     --to-pattern=GLOB     Show only destinations in the graph
     --fuzz=SECONDS        Also print also services which finished SECONDS
                           earlier than the latest in the branch
     --man[=BOOL]          Do [not] check for existence of man pages
     --generators[=BOOL]   Do [not] run unit generators (requires privileges)

Commands:
  time                     Print time spent in the kernel
  blame                    Print list of running units ordered by time to init
  critical-chain [UNIT...] Print a tree of the time critical chain of units
  plot                     Output SVG graphic showing service initialization
  dot [UNIT...]            Output dependency graph in man:dot(1) format
  log-level [LEVEL]        Get/set logging threshold for manager
  log-target [TARGET]      Get/set logging target for manager
  dump                     Output state serialization of service manager
  cat-config               Show configuration file and drop-ins
  unit-paths               List load directories for units
  syscall-filter [NAME...] Print list of syscalls in seccomp filter
  verify FILE...           Check unit files for correctness
  calendar SPEC...         Validate repetitive calendar time events
  service-watchdogs [BOOL] Get/set service watchdog state
  timespan SPAN...         Validate a time span
  security [UNIT...]       Analyze security of unit

See the systemd-analyze(1) man page for details.

# all the major browsers can be used to open SVG file
# dot tool: sudo apt-get install graphviz
systemd-analyze dot | dot -Tpng -o systemd-dependency.png
systemd-analyze dot | dot -Tsvg -o systemd-dependency.png

systemd-analyze dot kdump-tools.service
systemd-analyze verify default.target

==== Documentation of systemd unit files

https://www.freedesktop.org/software/systemd/man/systemd.service.html
https://www.freedesktop.org/software/systemd/man/systemd.unit.html

# If the empty string is assigned to this option, the list of commands to start is reset
#    i.e., prior assignments of this option will have no effect
# Assignment is additive. If not reset, a later assignment will just be added to previous assignment.
ExecStart=

# Prefix "-" indicates that command failure is recorded but considered equivlent to success
# Prefix "@": 2nd specified token is passed as "argv[0]", followed by further arguments specified
# Prefix ":": environment variable substitution is not applied
# Prefix "+": process is executed with full privileges
ExecStart=-/path/to/executable

# Prefix "-" indicates that if the file does not exist, it will not be read and no error or warning message is logged
EnvironmentFile=-/path/to/file

# Specifiers
%a: architecture
%h: user home directory
%H: hostname
%i: instance name. For instantiated units this is the string between the first "@" and the type suffix. Empty for non-instantiated units.
%I: unescaped instance name. Same as "%i", but with escaping undone.

==== Logs

# Log rotate
journalctl --rotate

# View latest log: -r reverse option
journalctl -r

# Get current log level: default info
systemd-analyze get-log-level
systemctl log-level

# Set log level to debug
systemd-analyze set-log-level debug
systemctl log-level debug

# Clear logs older than 10 days
journalctl --vacuum-time=10d

# Keep 2G worth og logs. Check size with: du -hs /var/log/journal OR journalctl --disk-usage
journalctl --vacuum-size=2G

# Limit number of log files to 5
journalctl --vacuum-files=5

# in service file
[service]
SyslogLevel=debug
StandardOutput=journal+console
StandardError=journal+console

==== Template unit file

Template unit files allow systemd to address multiple units from a single configuration file.
    <service_name>@.service

Call a systemd template unit file using a special format
    <service_name>@<argument>.service
    <argument>: text (string) passed to systemd to use in the unit file.
    Two identifiers are used in the unit file for passing the instance argument.
        %i passes the argument, specially formatted (escaped)
        %I passes the argument verbatim without escaping


$ cat /lib/systemd/system/modprobe@.service
[Unit]
Description=Load Kernel Module %i
DefaultDependencies=no
Before=sysinit.target
Documentation=man:modprobe(8)
ConditionCapability=CAP_SYS_MODULE
[Service]
Type=oneshot
ExecStart=-/sbin/modprobe -abq %I

# Install nvme module with the following
$ systemctl start modprobe@nvme.service

==== Override systemd unit files

# The systemd files that come with the software packages, usually get installed in a path like
#     /usr/lib/systemd/system/ (Arch, Manjaro) or
#     /lib/systemd/system/ (Debian, Ubuntu, Mint) and
#     not in /etc/systemd/system
# The systemd files in /etc/systemd/system/ take precedence over the other paths mentioned above
# To make changes to a systemd file from a software package:
#     change it directly, e.g., in /lib/systemd/system/: a update of the package will override the changes
#     copy it to /etc/systemd/system and change it there: it takes precedence over the original file in other path
#     systemctl edit foo.service: this creates /etc/systemd/system/foo.service.d/override.conf 
#                                 the name can be something different, e.g., foo.conf 
#     create a config package to install an override.conf in /etc/systemd/system/foo.service.d/ and install the package

==== Core dump cmdline

Can add systemd.unit=kdump-tools-dump.service to normal boot cmdline

https://manpages.debian.org/testing/systemd/systemd.1.en.html
systemd.unit=, rd.systemd.unit=:
    Overrides the unit to activate on boot. Defaults to default.target.
    This may be used to temporarily boot into a different boot unit, for example rescue.target or emergency.service.
    See systemd.special(7) for details about these units.
    The option prefixed with "rd." is honored only in the initial RAM disk (initrd), while the one that is not prefixed only in the main system.

systemd.dump_core:
    Takes a boolean argument or enables the option if specified without an argument.
    If enabled, the systemd manager (PID 1) dumps core when it crashes. Otherwise, no core dump is created. Defaults to enabled.

systemd.crash_shell:
    Takes a boolean argument or enables the option if specified without an argument.
    If enabled, the system manager (PID 1) spawns a shell when it crashes, after a 10s delay.
    Otherwise, no shell is spawned.
    Defaults to disabled, for security reasons, as the shell is not protected by password authentication.
